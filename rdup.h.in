#ifndef _RDUP_H
#define _RDUP_H

#include <glib.h>

#include "config.h"

/* copied from: http://www.boxbackup.org/trac/changeset/2054 */
#ifndef HAVE_DIRFD 
#define rdup_dirfd(x) (x)->dd_fd 
#endif /* HAVE_DIRFD */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <glob.h>
#include <fcntl.h>
#include <signal.h>
#include <dirent.h>
#include <libgen.h>
#include <syslog.h>
#include <errno.h>
#include <utime.h>
#ifdef HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif /* HAVE_SYS_SYSMACROS_H */
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

#ifdef HAVE_GETTEXT
#include <libintl.h>
#include <locale.h>
#define _(String) gettext (String)
#define gettext_noop(String) String
#define N_(String) gettext_noop (String)
#else
#define _(String) String
#endif /* HAVE_GETTEXT */

#ifdef HAVE_ATTR_XATTR_H
#include <attr/xattr.h>
#endif /* HAVE_ATTR_XATTR_H */

#include "entry.h"
#include "common.h"

#define VERSION     "@PACKAGE_VERSION@"

#define REG_VECTOR	30
#define NOBACKUP        ".nobackup"
#define USRGRPINFO      "._rdup_."      /* files starting with this prefix are ignored by rdup, they contain user/group info */
#define LEN_USRGRPINFO  8               /* length(USRGRPINFO) */
#define NULL_DUMP       0
#define VALUE          (void*)1 /* g_tree_lookup returns this in rdup */
#define NO_PRINT       (void*)2 /* don't print values with this flag */
#define D_STACKSIZE    100

#define NO_SHA         "0000000000000000000000000000000000000000"

#ifdef DEBUG
    #define _DEBUG "%s():%d", __func__, __LINE__,
#else
    #define _DEBUG
#endif

struct subtract {
        GTree *d; /* diff */
        GTree *b;
};

struct remove_path {
        GTree *tree;
        size_t len;
        char *path;
};

/* chown.c */
struct chown_pack {
    uid_t u;
    gchar *user;
    gid_t g;
    gchar *group;
};

void chown_write(gchar *dir, gchar *base, uid_t u, gchar *user, gid_t g, gchar *group);
struct chown_pack * chown_parse(gchar *dir, gchar *base);
/* chown_parse */

/* child.c */
void close_pipes(GSList *, int, int);
int wait_pids(GSList *, int);
GSList *create_children(GSList *, GSList **, int);

/* gfunc.c */
gint gfunc_equal(gconstpointer, gconstpointer);
gboolean gfunc_free(gpointer, gpointer, gpointer);
gboolean gfunc_write(gpointer, gpointer, gpointer);
gboolean gfunc_backup(gpointer, gpointer, gpointer);
gboolean gfunc_remove(gpointer, gpointer, gpointer);
gboolean gfunc_new(gpointer, gpointer, gpointer);
gboolean gfunc_subtract(gpointer, gpointer, gpointer);
gboolean gfunc_remove_path(gpointer, gpointer, gpointer);
gboolean gfunc_regexp(GSList *, char *, size_t);
gboolean gfunc_tree2list(gpointer, gpointer, gpointer);

/* rdup.c */
void msg(const char *, ...);
void msgd(const char *, int, const char *, ...);

/* getdelim.c */
ssize_t rdup_getdelim(char **, size_t *, int, FILE *);

/* abspath.c */
char * abspath(char *);

/* signal.c */
void signal_abort(int);

/* link.c */
gchar * hlink(GHashTable *, struct rdup *);
gchar * slink(struct rdup *);

/* reverse.c */
GList * reverse(GTree *);
void  gfunc_new_list(gpointer, gpointer);
void  gfunc_remove_list(gpointer, gpointer);
void  gfunc_backup_list(gpointer, gpointer);

/* crawler.c */
void dir_crawl(GTree *, GHashTable *, GHashTable *, GHashTable *, char *);
gboolean dir_prepend(GTree *, char *, GHashTable *, GHashTable *);

/* names.c */
gchar * lookup_user(GHashTable *, uid_t);
gchar * lookup_group(GHashTable *, gid_t);

/* usage.c */
void usage(FILE *);

/* regexp.c */
int regexp_init(char *);
#endif  /* _RDUP_H */
